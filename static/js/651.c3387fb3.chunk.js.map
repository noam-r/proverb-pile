{"version":3,"file":"static/js/651.c3387fb3.chunk.js","mappings":"6JAkBA,MAmCMA,EAAsBC,UAC1B,IAGMC,EAQJ,MAAMC,EAAe,CAAC,GAADC,OAChBF,gBAAsB,KAAAE,OAAIC,EAAQ,qBAAAD,OACjCC,EAAQ,kBACZC,OAAOC,GAAe,eAARA,GAEhB,IAAIC,EAAkB,GAClBC,EAA0B,KAE9B,IAAK,MAAMF,KAAOJ,EAChB,IACE,MAAMO,QAAiBC,MAAMJ,GAE7B,GAAIG,EAASE,GAAI,CACfJ,QAAgBE,EAASG,OACzB,KACF,CACE,MAAM,IAAIC,MAAM,QAADV,OAASM,EAASK,OAAM,MAAAX,OAAKM,EAASM,YAEzD,CAAE,MAAOC,GACPR,EAAYQ,CACd,CAGF,IAAKT,EACH,MAAMC,GAAa,IAAIK,MAAM,uBAG/B,MAAMI,EA1EQV,IACFA,EAAQW,OAAOC,MAAM,MAGtBC,MAAM,GAAGC,IAAIC,IAExB,MAAMC,EAAmB,GACzB,IAAIC,EAAU,GACVC,GAAW,EAEf,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IAAK,CACpC,MAAME,EAAON,EAAKI,GAEL,MAATE,EACFH,GAAYA,EACM,MAATG,GAAiBH,EAI1BD,GAAWI,GAHXL,EAAOM,KAAKL,EAAQN,QACpBM,EAAU,GAId,CAGA,OAFAD,EAAOM,KAAKL,EAAQN,QAEb,CACLY,SAAUP,EAAO,IAAM,GACvBQ,QAASR,EAAO,IAAM,GACtBS,QAAST,EAAO,IAAM,MAEvBlB,OAAO4B,GAAOA,EAAIH,UAAYG,EAAIF,SAAWE,EAAID,SA6CnCE,CAAS3B,GAExB,GAAsB,IAAlBU,EAAOU,OACT,MAAM,IAAId,MAAM,kCAGlB,OAAOI,CACT,CAAE,MAAOD,GAGP,MADAmB,QAAQnB,MAAM,kBAADb,OAAmBC,EAAQ,cAAcY,GAChD,IAAIH,MAAM,kBAADV,OAAmBC,EAAQ,eAAAD,OAAca,GAC1D,GAMWoB,EAA8BpC,eACzCI,GAE4D,IAD5DiC,EAAwBC,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAE3B,MAAME,QAAoBzC,EAAoBK,GAE9C,GAA2B,IAAvBoC,EAAYb,OACd,MAAM,IAAId,MAAM,mCAADV,OAAoCC,IAIrD,MAAMqC,EAAmBD,EACtBnB,IAAI,CAACqB,EAAGC,IAAUA,GAClBtC,OAAOsC,IAAUN,EAAeO,SAASD,IAG5C,GAAIF,EAAiBd,OAAS,EAC5B,OAAOS,EAA4BhC,EAAU,IAI/C,MACMyC,EAA4B,GAC5BC,EAA8B,GAEpC,IAAK,IAAIpB,EAAI,EAAGA,EAJI,GAIee,EAAiBd,OAAS,EAAGD,IAAK,CACnE,MAAMqB,EAAcC,KAAKC,MAAMD,KAAKE,SAAWT,EAAiBd,QAC1DwB,EAAeV,EAAiBM,GAChCK,EAAUZ,EAAYW,GAE5BN,EAAgBhB,KAAKsB,GACrBL,EAAiBjB,KAAK,CACpBC,SAAUsB,EAAQtB,SAClBC,QAASqB,EAAQrB,QACjBC,QAASoB,EAAQpB,UAInBS,EAAiBY,OAAON,EAAa,EACvC,CAQA,MAAO,CACLO,OAPyB,CACzBC,QAAS,IACTnD,WACAoD,SAAUV,GAKVW,YAAa,IAAIpB,KAAmBQ,GAExC,C","sources":["utils/csvPuzzleLoader.ts"],"sourcesContent":["/**\n * CSV-based puzzle loader utility\n * Loads and parses proverb data from CSV files\n */\n\nimport { PuzzleData, Proverb, LanguageCode } from '../types';\n\n// CSV files are served from public directory\n\ninterface CSVRow {\n  solution: string;\n  culture: string;\n  meaning: string;\n}\n\n/**\n * Parse CSV text into array of objects\n */\nconst parseCSV = (csvText: string): CSVRow[] => {\n  const lines = csvText.trim().split('\\n');\n  // const headers = lines[0].split(',').map(h => h.replace(/\"/g, '').trim());\n  \n  return lines.slice(1).map(line => {\n    // Handle CSV parsing with quoted fields\n    const values: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      \n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        values.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    values.push(current.trim()); // Add the last value\n    \n    return {\n      solution: values[0] || '',\n      culture: values[1] || '',\n      meaning: values[2] || ''\n    };\n  }).filter(row => row.solution && row.culture && row.meaning);\n};\n\n/**\n * Load all proverbs from a CSV file\n */\nconst loadProverbsFromCSV = async (language: LanguageCode): Promise<CSVRow[]> => {\n  try {\n    // In development, we need to import the CSV files directly\n    // In production, we can fetch them from the public directory\n    if (process.env.NODE_ENV === 'development') {\n      // For development, we'll use a hardcoded fallback since the dev server\n      // doesn't serve CSV files properly\n      const fallbackData = language === 'he' ? getHebrewFallbackData() : getEnglishFallbackData();\n      return fallbackData;\n    }\n    \n    // Try multiple URL patterns for production\n    const possibleUrls = [\n      `${process.env.PUBLIC_URL}/${language}-proverbs.csv`,\n      `/${language}-proverbs.csv`\n    ].filter(url => url !== '/undefined'); // Remove undefined URLs\n    \n    let csvText: string = '';\n    let lastError: Error | null = null;\n    \n    for (const url of possibleUrls) {\n      try {\n        const response = await fetch(url);\n        \n        if (response.ok) {\n          csvText = await response.text();\n          break;\n        } else {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n      } catch (error) {\n        lastError = error as Error;\n      }\n    }\n    \n    if (!csvText) {\n      throw lastError || new Error('All CSV URLs failed');\n    }\n    \n    const parsed = parseCSV(csvText);\n    \n    if (parsed.length === 0) {\n      throw new Error('No valid proverbs found in CSV');\n    }\n    \n    return parsed;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(`Failed to load ${language} proverbs:`, error);\n    throw new Error(`Unable to load ${language} proverbs: ${error}`);\n  }\n};\n\n/**\n * Generate a random puzzle from CSV data\n */\nexport const generateRandomPuzzleFromCSV = async (\n  language: LanguageCode,\n  excludeIndices: number[] = []\n): Promise<{ puzzle: PuzzleData; usedIndices: number[] }> => {\n  const allProverbs = await loadProverbsFromCSV(language);\n  \n  if (allProverbs.length === 0) {\n    throw new Error(`No proverbs found for language: ${language}`);\n  }\n  \n  // Filter out already used proverbs\n  const availableIndices = allProverbs\n    .map((_, index) => index)\n    .filter(index => !excludeIndices.includes(index));\n  \n  // If we've used all proverbs, reset and start over\n  if (availableIndices.length < 3) {\n    return generateRandomPuzzleFromCSV(language, []);\n  }\n  \n  // Always select exactly 3 proverbs for default mode\n  const numProverbs = 3;\n  const selectedIndices: number[] = [];\n  const selectedProverbs: Proverb[] = [];\n  \n  for (let i = 0; i < numProverbs && availableIndices.length > 0; i++) {\n    const randomIndex = Math.floor(Math.random() * availableIndices.length);\n    const proverbIndex = availableIndices[randomIndex];\n    const proverb = allProverbs[proverbIndex];\n    \n    selectedIndices.push(proverbIndex);\n    selectedProverbs.push({\n      solution: proverb.solution,\n      culture: proverb.culture,\n      meaning: proverb.meaning\n    });\n    \n    // Remove this index from available indices\n    availableIndices.splice(randomIndex, 1);\n  }\n  \n  const puzzle: PuzzleData = {\n    version: \"1\",\n    language,\n    proverbs: selectedProverbs\n  };\n  \n  return {\n    puzzle,\n    usedIndices: [...excludeIndices, ...selectedIndices]\n  };\n};\n\n/**\n * Get the total number of available proverbs for a language\n */\nexport const getProverbCount = async (language: LanguageCode): Promise<number> => {\n  try {\n    const proverbs = await loadProverbsFromCSV(language);\n    return proverbs.length;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(`Failed to get proverb count for ${language}:`, error);\n    return 0;\n  }\n};\n\n/**\n * Check if there are more puzzles available\n */\nexport const hasMorePuzzles = (usedIndices: number[], totalCount: number): boolean => {\n  return usedIndices.length < totalCount - 3; // Need at least 3 proverbs for a puzzle\n};\n\n/**\n * Fallback English proverbs for development\n */\nconst getEnglishFallbackData = (): CSVRow[] => [\n  {\n    solution: \"When elephants fight, it is the grass that suffers\",\n    culture: \"Kenyan\",\n    meaning: \"Ordinary people suffer when the powerful clash\"\n  },\n  {\n    solution: \"The child who is not embraced by the village will burn it down to feel its warmth\",\n    culture: \"Nigerian\", \n    meaning: \"Neglect breeds resentment and destruction\"\n  },\n  {\n    solution: \"Do not call the forest that shelters you a jungle\",\n    culture: \"Congolese\",\n    meaning: \"Respect those who protect and support you\"\n  },\n  {\n    solution: \"Even the smallest rooster thinks he is king of the yard\",\n    culture: \"Haitian\",\n    meaning: \"People often overestimate their importance\"\n  },\n  {\n    solution: \"He who learns, teaches\",\n    culture: \"Ethiopian\",\n    meaning: \"Knowledge should be shared, not hoarded\"\n  },\n  {\n    solution: \"A man who uses force is afraid of reasoning\",\n    culture: \"Ghanaian\",\n    meaning: \"Violence comes from weakness, not strength\"\n  },\n  {\n    solution: \"Empty bags cannot stand upright\",\n    culture: \"Italian\",\n    meaning: \"Poverty or lack of means makes dignity difficult\"\n  },\n  {\n    solution: \"He who wants to harvest honey must brave the bees\",\n    culture: \"Russian\",\n    meaning: \"You can't achieve success without facing risk\"\n  },\n  {\n    solution: \"The tongue has no bones but can break bones\",\n    culture: \"Turkish\",\n    meaning: \"Words can cause great harm\"\n  },\n  {\n    solution: \"A bird in the hand is worth two in the bush\",\n    culture: \"English\",\n    meaning: \"It's better to have something certain than to risk it for something better\"\n  }\n];\n\n/**\n * Fallback Hebrew proverbs for development\n */\nconst getHebrewFallbackData = (): CSVRow[] => [\n  {\n    solution: \"המסמר הבולט מקבל את הפטיש\",\n    culture: \"יפנית\",\n    meaning: \"לא טוב להתבלט או לסטות מהקבוצה\"\n  },\n  {\n    solution: \"האמן, אבל בדוק\",\n    culture: \"רוסית\",\n    meaning: \"חשוב לתת אמון, אך לא בעיניים עצומות\"\n  },\n  {\n    solution: \"כשאין דגים, גם סרטנים נחשבים לדגים\",\n    culture: \"סינית\",\n    meaning: \"כשהמצב קשה, מסתפקים במה שיש\"\n  },\n  {\n    solution: \"הביצה מלמדת את התרנגולת\",\n    culture: \"אנגלית\",\n    meaning: \"מי שפחות מנוסה מנסה ללמד את המומחה\"\n  },\n  {\n    solution: \"אל תשרוף את הגשר שאתה צריך לעבור עליו\",\n    culture: \"אמריקאית\",\n    meaning: \"אל תפגע באנשים שתזדקק להם בעתיד\"\n  },\n  {\n    solution: \"מי שקובר בור לאחרים, נופל בו בעצמו\",\n    culture: \"גרמנית\",\n    meaning: \"מי שמתכנן רעה לאחרים, נפגע ממנה בעצמו\"\n  },\n  {\n    solution: \"אל תמכור את העור לפני שהרגת את הדוב\",\n    culture: \"צרפתית\",\n    meaning: \"אל תשמח או תתחייב לפני שהשגת את מבוקשך\"\n  },\n  {\n    solution: \"כששני פילים נלחמים, הדשא נרמס\",\n    culture: \"אפריקאית\",\n    meaning: \"כשחזקים נאבקים, החלשים הם שסובלים\"\n  },\n  {\n    solution: \"טיפה אחר טיפה ממלאת את הכד\",\n    culture: \"ערבית\",\n    meaning: \"מאמצים קטנים ומתמשכים מובילים לתוצאות גדולות\"\n  },\n  {\n    solution: \"דרך ארץ קדמה לתורה\",\n    culture: \"עברית\",\n    meaning: \"נימוסים וכבוד הדדי חשובים יותר מידע\"\n  }\n];"],"names":["loadProverbsFromCSV","async","process","possibleUrls","concat","language","filter","url","csvText","lastError","response","fetch","ok","text","Error","status","statusText","error","parsed","trim","split","slice","map","line","values","current","inQuotes","i","length","char","push","solution","culture","meaning","row","parseCSV","console","generateRandomPuzzleFromCSV","excludeIndices","arguments","undefined","allProverbs","availableIndices","_","index","includes","selectedIndices","selectedProverbs","randomIndex","Math","floor","random","proverbIndex","proverb","splice","puzzle","version","proverbs","usedIndices"],"sourceRoot":""}